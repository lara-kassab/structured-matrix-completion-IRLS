%% ---- Test file for IRLS-q ---------------- %%

%% ----- This is the code associated with  the paper:
% ----- "Iterative Reweighted Algorithms for Matrix Rank Minimization"
% ----- Karthik Mohan (karna@uw.edu) and Maryam Fazel (mfazel@uw.edu).

% ----- LAST UPDATE: 7/29/2012 --------------%

clc; clear; close all;

%fprintf('--------------------------------------------------------\n');
fprintf('--------------------------------------------------------\n');
fprintf('                    Gathering data                      \n');
%fprintf('--------------------------------------------------------\n');
fprintf('--------------------------------------------------------\n\n');

ins = 0; type = 0; h = 0;
if (type == 0)
type = input(' To choose from existing problem instances, Enter 1.\n To Input your own data, Enter 2:  ');
while(type < 1 || type > 2)
    type = input('\n Enter either 1 or 2 ');
end;
end;

if(type == 1)

if(h == 0)
h = input('\n Enter 1 for easy problem instance and 2 for hard problem instance:  ');
while(h < 1 || h > 2)
    h = input('Enter either 1 or 2 \n');
end;
end;    
    
if(ins == 0)
      if(h == 1)
        fprintf('\n');       
        disp('PI #1: ');
        fprintf('m = 100; n = 100; sr = 0.57; p = round(m*n*sr); r = 10; eta = 1.1 \n\n');
       
    disp('PI #2: ');
    fprintf('m = 200; n = 200; sr = 0.39; p = round(m*n*sr); r = 10; eta = 1.1 \n\n');

    disp('PI #3: ');
    fprintf('m = 500; n = 500; sr = 0.2; p = round(m*n*sr); r = 10; eta = 1.1 \n\n');

    disp('PI #4: ');
    fprintf('m = 500; n = 500; sr = 0.12; p = round(m*n*sr); r = 10; eta = 1.1\n\n');

    disp('PI #5: ');
    fprintf('m = 1000; n = 1000; sr = 0.12; p = round(m*n*sr); r = 10; eta = 1.1\n\n');

    disp('PI #6: ');
    fprintf('m = 1000; n = 1000; sr = 0.39; p = round(m*n*sr); r = 50; eta = 1.1\n\n');

    disp('PI #7: ');
    fprintf('m = 1000; n = 1000; sr = 0.12; p = round(m*n*sr); r = 20; eta = 1.1\n\n');

    disp('PI #8');
    fprintf('m = 2000; n = 2000; sr = 0.12; p = round(m*n*sr); r = 20; eta = 1.1\n\n');

    disp('PI #9: ');
    fprintf('m = 2000; n = 2000; sr = 0.12; p = round(m*n*sr); r = 40; eta = 1.1\n\n');    
    
    else
        
        fprintf('\n');       
        disp('PI #1: ');
        fprintf('m = 40; n = 40; sr = 0.5; p = round(m*n*sr); r = 9; svditer = 400; eta = 1.03 \n\n');
       
    disp('PI #2: ');
    fprintf('m = 100; n = 100; sr = 0.3; p = round(m*n*sr); r = 14; svditer = 400; eta = 1.03 \n\n');

    disp('PI #3: ');
    fprintf('m = 500; n = 500; sr = 0.1; p = round(m*n*sr); r = 20; eta = 1.03 \n\n');

    disp('PI #4: ');
    fprintf('m = 1000; n = 1000; sr = 0.1; p = round(m*n*sr); r = 20; eta = 1.03 \n\n');

    disp('PI #5: ');
    fprintf('m = 1000; n = 1000; sr = 0.08; p = round(m*n*sr); r = 20; eta = 1.03 \n\n');

    disp('PI #6: ');
    fprintf('m = 1000; n = 1000; sr = 0.07; p = round(m*n*sr); r = 20; eta = 1.03 \n\n');

    disp('PI #7: ');
    fprintf('m = 1000; n = 1000; sr = 0.06; p = round(m*n*sr); r = 20; eta = 1.03 \n\n');

    disp('PI #8');
    fprintf('m = 1000; n = 1000; sr = 0.1; p = round(m*n*sr); r = 30; eta = 1.03 \n\n');

    disp('PI #9: ');
    fprintf('m = 1000; n= 1000; sr = 0.2; p = round(m*n*sr); r = 50; eta = 1.03 \n\n'); 
    
    end;
        
    
ins = input('\n Enter a problem instance betwen 1-9 based on above list:  ');
while(ins < 1 || ins > 9 || abs(ins - floor(ins)) > 0)
    ins = input('\n Enter an integer between 1 and 9:  ');
end;
end;

rknown = 2;
if(rknown < 0 || rknown > 1)
rknown = input('\n Should IRLS know the rank of true matrix. \n Enter 1 if yes, 0 if no:  ');
while(rknown <0 || rknown > 1)
    rknown = input('\n Enter either 0 or 1:  ');
end;
end;
[m,n,sr,p,r,rmax,fr,eta,svditer,incr,niter] = Probinstances(h,ins);
nrg = 0;
if(nrg <= 0)
nrg = input('\n Enter the number of random generations of the data required to average the results:  ');
while(nrg <= 0)
    nrg = input('\n Enter an integer greater than 0:  ');
end;
end;

M = zeros(n,n);
end;

if(type == 2)
    n = input('\n Enter the #rows or columns in the square matrix:  ');
    r = input('\n Enter the rank of the true matrix:  '); 
    rknown = input('\n Should IRLS know the rank of true matrix. \n Enter 1 if yes, 0 if no:  ');
    fprintf('\n Create a data matrix M.mat which has the following format: \n');
    fprintf(' "The matrix M.mat has 3 columns. The first two columns denote the row-index and column-index.\n');
    fprintf(' The last column has the values of matrix M at the row-column indices specified in the first two columns." \n');
    existence = exist('M.mat');
    if existence == 2
    load('M.mat');
    else
    fprintf('\n\n You have not yet added the input matrix M.mat to the current folder.\n Please do so and run the code again. \n');
    break;
    end;
    non_zero = size(M,1);
    sr = non_zero/(n*n);
    p = non_zero; % # Measurements
    rmax = ceil(n*(1 - sqrt(1 - sr)));
    fr = r*(2*n - r)/p;
    if(fr < 0.4)
        eta = 1.1;
        niter = 500;
        svditer = 10;
        incr = 50;
    else
        eta = 1.03;
        niter = 5000;
        svditer = 50;
        incr = 100;
    end;
    nrg = 1;  
end;

q = input('\n IRLS-q: Choose a q between 0 and 1: ');
while(q < 0 || q > 1)
    q = input('\n Enter a real number between 0 and 1:  ');
end;

    
    

gam0 = 1e-2;
gammin = 1e-10;
tol = 1e-3;
fprintf('\n -------------------');
fprintf('\n Algorithm begins...');
fprintf('\n -------------------\n\n');
[NS, avgerr,avgiterno, TT,timeperiter, TTcpu,Xalgo] = irls_q(n,sr,r,rmax,rknown,eta,gam0,gammin,q,tol,nrg,niter,svditer,incr,type,M);

%% ----------- OUTPUT ---------------------- %%

if(type == 1)
fprintf('\n\n n = %d, r = %d, p = %d, samp.ratio = %3.2f, freedom = %3.2f, eta = %1.3f \n', n,r,p,sr,fr,eta);
fprintf(' NS = %d, Avg Rec Err. = %0.5f,Avg # Iters = %d, Avg clock time = %3.2f,Clock time/iter = %3.3f Avg cpu time = %3.2f \n\n\n', NS, avgerr,avgiterno, TT,timeperiter, TTcpu);
else
fprintf('\n\n n = %d, r = %d, p = %d, samp.ratio = %3.2f, freedom = %3.2f, eta = %1.3f \n', n,r,p,sr,fr,eta);
fprintf(' # Iters = %d, Clock time = %3.2f, Clock time/iter = %3.3f Cpu time = %3.2f \n\n\n', avgiterno, TT,timeperiter, TTcpu);
end;

fprintf('\n The completed matrix is given by Xalgo.mat ...\n');
